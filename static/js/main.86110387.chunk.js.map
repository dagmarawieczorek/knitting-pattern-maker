{"version":3,"sources":["components/Box.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickedBox","setState","bgColor","color","clicked","state","defaultColor","react_default","a","createElement","className","style","background","onClick","Component","App","handleChangeWidth","event","width","Number","target","value","handleChangeHeight","height","handleChangeComplete","pickedColor","hex","generateChart","e","preventDefault","stitchesWidth","length","stitchesHeight","i","push","_this2","Rows","map","elem","index","components_Box","key","AllStitches","type","onChange","lib","circleSize","onChangeComplete","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86110387.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Box extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            bgColor: \"#B3B3B3\",\r\n            defaultColor: \"#B3B3B3\",\r\n            clicked: false,\r\n            }\r\n    }\r\n\r\n    handleClickedBox=()=> {\r\n        this.setState({bgColor: this.props.color,\r\n        clicked:!this.state.clicked})\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"box\"\r\n                 style={{background: this.state.clicked?this.state.bgColor:this.state.defaultColor}}\r\n                 onClick={this.handleClickedBox}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;","import React, {Component} from 'react';\nimport './App.css';\nimport Box from \"./components/Box.js\";\nimport {CirclePicker} from 'react-color';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pickedColor: \"#B3B3B3\",\n            width: 0,\n            height: 0,\n            stitchesWidth: [],\n            stitchesHeight: [],\n        };\n    }\n\n\n    handleChangeWidth = (event) => {\n        this.setState({width: Number(event.target.value)});\n    };\n\n    handleChangeHeight = (event) => {\n        this.setState({height: Number(event.target.value)});\n    };\n\n    handleChangeComplete = (color) => {\n        this.setState({pickedColor: color.hex});\n    };\n\n    generateChart = (e) => {\n        e.preventDefault();\n\n        if (this.state.stitchesWidth.length > 0) {\n            this.setState({\n                stitchesWidth: [],\n                stitchesHeight: [],\n                width: 0,\n                height: 0,\n            });\n        }\n\n        for (let i = 1; i <= this.state.width; i++) {\n            this.state.stitchesWidth.push(i);\n        }\n\n        for (let i = 0; i < this.state.height; i++) {\n            this.state.stitchesHeight.push(this.state.stitchesWidth);\n        }\n\n        this.setState({});\n    }\n\n\n    render() {\n\n        let Rows = this.state.stitchesWidth.map((elem, index) => {\n                return <Box color={this.state.pickedColor} key={index}/>\n            }\n        );\n\n        let AllStitches = this.state.stitchesHeight.map((elem, index) => {\n            return <div className=\"rows\" key={index}> {Rows} </div>\n        });\n\n\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n\n                    <div className=\"navBox\">\n                        <h1 className=\"title\">Knitting pattern generator</h1>\n                        <h2>Type dimensions of your pattern</h2>\n                        <div className=\"inputBox\">\n                            <input type=\"number\" className=\"input\"\n                                   value={this.state.width}\n                                   onChange={this.handleChangeWidth}/>\n\n                            <span className=\"multiply\">X</span>\n                            <input type=\"number\" className=\"input\"\n                                   value={this.state.height}\n                                   onChange={this.handleChangeHeight}/>\n                            <button\n                                className=\"button\"\n                                onClick={this.generateChart}>{this.state.stitchesWidth.length > 0 ? \"Clear!\" : \"Ok!\"}\n                            </button>\n                        </div>\n\n                        <CirclePicker\n                            width=\"300px\"\n                            circleSize={35}\n                            color={this.state.pickedColor}\n                            onChangeComplete={this.handleChangeComplete}/>\n\n                    </div>\n\n                    <div className=\"knittingBox\">\n                        {AllStitches}\n\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}